// Generated by gencpp from file lidart_gap_finding/gaps.msg
// DO NOT EDIT!


#ifndef LIDART_GAP_FINDING_MESSAGE_GAPS_H
#define LIDART_GAP_FINDING_MESSAGE_GAPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidart_gap_finding
{
template <class ContainerAllocator>
struct gaps_
{
  typedef gaps_<ContainerAllocator> Type;

  gaps_()
    : r1()
    , theta1()
    , r2()
    , theta2()
    , x1()
    , y1()
    , x2()
    , y2()
    , euc_length()
    , delta_angle()  {
    }
  gaps_(const ContainerAllocator& _alloc)
    : r1(_alloc)
    , theta1(_alloc)
    , r2(_alloc)
    , theta2(_alloc)
    , x1(_alloc)
    , y1(_alloc)
    , x2(_alloc)
    , y2(_alloc)
    , euc_length(_alloc)
    , delta_angle(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _r1_type;
  _r1_type r1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _theta1_type;
  _theta1_type theta1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _r2_type;
  _r2_type r2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _theta2_type;
  _theta2_type theta2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x1_type;
  _x1_type x1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y1_type;
  _y1_type y1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x2_type;
  _x2_type x2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y2_type;
  _y2_type y2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _euc_length_type;
  _euc_length_type euc_length;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _delta_angle_type;
  _delta_angle_type delta_angle;





  typedef boost::shared_ptr< ::lidart_gap_finding::gaps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidart_gap_finding::gaps_<ContainerAllocator> const> ConstPtr;

}; // struct gaps_

typedef ::lidart_gap_finding::gaps_<std::allocator<void> > gaps;

typedef boost::shared_ptr< ::lidart_gap_finding::gaps > gapsPtr;
typedef boost::shared_ptr< ::lidart_gap_finding::gaps const> gapsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidart_gap_finding::gaps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidart_gap_finding::gaps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lidart_gap_finding

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lidart_gap_finding': ['/home/mhasek/Documents/ESE680/Lidar_lab/lidar_lab_ws/src/f110-fall2018-skeletons/labs/lidart_gap_finding/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lidart_gap_finding::gaps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidart_gap_finding::gaps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidart_gap_finding::gaps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidart_gap_finding::gaps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidart_gap_finding::gaps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidart_gap_finding::gaps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidart_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c57a067c5b046afa4cdb6b94f79d87d2";
  }

  static const char* value(const ::lidart_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc57a067c5b046afaULL;
  static const uint64_t static_value2 = 0x4cdb6b94f79d87d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidart_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidart_gap_finding/gaps";
  }

  static const char* value(const ::lidart_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidart_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# angles are angle from lidar scan\n\
# ranges are distance from lidar\n\
# lengths are lengths of gap\n\
\n\
float32[] r1\n\
float32[] theta1\n\
float32[] r2\n\
float32[] theta2\n\
\n\
float32[] x1\n\
float32[] y1\n\
float32[] x2\n\
float32[] y2\n\
\n\
float32[] euc_length\n\
float32[] delta_angle\n\
";
  }

  static const char* value(const ::lidart_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidart_gap_finding::gaps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r1);
      stream.next(m.theta1);
      stream.next(m.r2);
      stream.next(m.theta2);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.euc_length);
      stream.next(m.delta_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gaps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidart_gap_finding::gaps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidart_gap_finding::gaps_<ContainerAllocator>& v)
  {
    s << indent << "r1[]" << std::endl;
    for (size_t i = 0; i < v.r1.size(); ++i)
    {
      s << indent << "  r1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r1[i]);
    }
    s << indent << "theta1[]" << std::endl;
    for (size_t i = 0; i < v.theta1.size(); ++i)
    {
      s << indent << "  theta1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta1[i]);
    }
    s << indent << "r2[]" << std::endl;
    for (size_t i = 0; i < v.r2.size(); ++i)
    {
      s << indent << "  r2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r2[i]);
    }
    s << indent << "theta2[]" << std::endl;
    for (size_t i = 0; i < v.theta2.size(); ++i)
    {
      s << indent << "  theta2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta2[i]);
    }
    s << indent << "x1[]" << std::endl;
    for (size_t i = 0; i < v.x1.size(); ++i)
    {
      s << indent << "  x1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x1[i]);
    }
    s << indent << "y1[]" << std::endl;
    for (size_t i = 0; i < v.y1.size(); ++i)
    {
      s << indent << "  y1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y1[i]);
    }
    s << indent << "x2[]" << std::endl;
    for (size_t i = 0; i < v.x2.size(); ++i)
    {
      s << indent << "  x2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x2[i]);
    }
    s << indent << "y2[]" << std::endl;
    for (size_t i = 0; i < v.y2.size(); ++i)
    {
      s << indent << "  y2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y2[i]);
    }
    s << indent << "euc_length[]" << std::endl;
    for (size_t i = 0; i < v.euc_length.size(); ++i)
    {
      s << indent << "  euc_length[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euc_length[i]);
    }
    s << indent << "delta_angle[]" << std::endl;
    for (size_t i = 0; i < v.delta_angle.size(); ++i)
    {
      s << indent << "  delta_angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.delta_angle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDART_GAP_FINDING_MESSAGE_GAPS_H
